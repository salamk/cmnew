/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cmnew;

import java.awt.Color;
import java.awt.Font;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.plaf.metal.MetalLookAndFeel;
import net.coolmarch.cmnew.chartwidget.PnlChartView;
import net.coolmarch.cmnew.common.CommonIdentification;
import net.coolmarch.cmnew.common.ReadUrl;
import net.coolmarch.cmnew.fiplip.PnlFLMain;
import net.coolmarch.cmnew.mchart.PnlIndexView;
import net.coolmarch.cmnew.recentdata.PnlRecentQuote;
import net.coolmarch.cmnew.res.CMResource;
import net.coolmarch.cmnew.sectorprogress.PnlSectorPerformanceMainWindow;
import net.coolmarch.cmnew.symboltree.PSymbolExplorer;
import net.coolmarch.cmnew.tools.GreenMetalTheme;
import net.coolmarch.cmnew.tools.PnlPortfolio;
import net.coolmarch.cmnew.tools.PnlReports;
import net.coolmarch.daemon.DataFetchingDaemon;
import net.coolmarch.worldmarkets.PnlWorldMarkets;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.ui.RectangleAnchor;

/**
 *
 * @author salam
 */
public final class InterfaceMain2 extends javax.swing.JFrame {

    /**
     * Creates new form InterfaceMain
     */
    private final String cid = "yUP1pxC3y0sv4nkCrXHZCTWVqz4fZ6";
    private Date guptDate;
    private static HashMap<String, JFreeChart> chartRegister = new HashMap<>();
    private Font labelFont;

    public InterfaceMain2() {
        checkAttr();
        initComponents();
        String d = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
        d = d + " 09:30:00";
        try {
            guptDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(d);
        } catch (Exception e) {

        }

        labelFont = new Font("Arial", Font.PLAIN, 10);

        setDefaultView();

        new Thread(new Runnable() {
            public void run() {

                sleep(10000);

                while (true) {
                        DataFetchingDaemon dfd = new DataFetchingDaemon();
                        dfd.getPulse();
                        updateChartValueMarkers();
                        updateNewsTicker();
                    sleep(300000);

                }

            }
        }
        ).start();

    }
//

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfTicker = new javax.swing.JTextField();
        jSplitPane1 = new javax.swing.JSplitPane();
        westPane = new javax.swing.JTabbedPane();
        editorPane = new javax.swing.JTabbedPane();
        mainTab = new net.coolmarch.cmnew.common.JTabbedPaneCloseButton();
        tb = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbState = new javax.swing.JLabel();
        pnlview = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu10 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        tfTicker.setEditable(false);
        tfTicker.setBackground(new java.awt.Color(153, 0, 0));
        tfTicker.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        tfTicker.setForeground(new java.awt.Color(255, 255, 255));
        tfTicker.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfTicker.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        tfTicker.setEnabled(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Coolmarch");

        jSplitPane1.setBorder(null);
        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setOneTouchExpandable(true);
        jSplitPane1.setLeftComponent(westPane);
        jSplitPane1.setRightComponent(editorPane);

        mainTab.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jSplitPane1.setRightComponent(mainTab);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        tb.setRollover(true);
        tb.setOpaque(false);

        jLabel1.setText("Pakistan");
        tb.add(jLabel1);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/coolmarch/cmnew/res/flag_pakistan.png"))); // NOI18N
        jLabel2.setText(" ");
        tb.add(jLabel2);

        lbState.setText("            ");
        lbState.setOpaque(true);
        tb.add(lbState);

        pnlview.setBackground(new java.awt.Color(255, 153, 51));
        pnlview.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pnlview.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 0));

        jLabel3.setText("KARACHI");
        pnlview.add(jLabel3);

        tb.add(pnlview);

        getContentPane().add(tb, java.awt.BorderLayout.PAGE_START);

        jMenu1.setText("File");

        jMenuItem6.setText("Exit");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu11.setText("Recent");

        jMenuItem2.setText("Recent Market Summary");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem2);

        jMenuBar1.add(jMenu11);

        jMenu4.setText("Sector");

        jMenuItem3.setText("Sector Wise Market Progress");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuBar1.add(jMenu4);

        jMenu10.setText("Widgets");

        jMenuItem1.setText("Chart Widgets");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem1);

        jMenuBar1.add(jMenu10);

        jMenu6.setText("Fip/Lip");

        jMenuItem5.setText("FIP/LIP");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem5);

        jMenuBar1.add(jMenu6);

        jMenu8.setText("Portfolio");

        jMenuItem7.setText("My Portfolio");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem7);

        jMenuBar1.add(jMenu8);

        jMenu9.setText("Publication");

        jMenuItem8.setText("View Files");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem8);

        jMenuBar1.add(jMenu9);

        jMenu5.setText("World");

        jMenuItem4.setText("International Markets");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem4);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        PnlChartView pcv = new PnlChartView();
        mainTab.addTab("Widgets", pcv);

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        PnlRecentQuote prq = new PnlRecentQuote();
        mainTab.addTab("Recent", prq);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        PnlSectorPerformanceMainWindow psf = new PnlSectorPerformanceMainWindow();
        mainTab.addTab("Sector", psf);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        PnlFLMain psf = new PnlFLMain();
        mainTab.addTab("Fip/Lip", psf);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        PnlPortfolio pp = new PnlPortfolio();
        mainTab.addTab("Portfolio", pp);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        PnlReports pp = new PnlReports();
        mainTab.addTab("Report", pp);

    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        PnlWorldMarkets pm = new PnlWorldMarkets();
        mainTab.addTab("International", pm);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    public void setDefaultView() {
        westPane.add(new PSymbolExplorer(), "Explorer");
        PnlIndexView ppv = new PnlIndexView();
        westPane.add(ppv, "Index-View");
        //westPane.add(new PnlPriceView(), "Market");

    }

    private void changeTheme(String tname) {
        if (tname.compareToIgnoreCase("green") == 0) {
            MetalLookAndFeel.setCurrentTheme(new GreenMetalTheme());
        }
    }

    private void checkAttr() {
        CommonIdentification ci = new CommonIdentification();
        boolean a = ci.authenticateCode(this.getClass().getSimpleName(), cid);
        if (!a) {
            JOptionPane.showMessageDialog(null, "System failure ||| PANIC Signal");
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane editorPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lbState;
    public static net.coolmarch.cmnew.common.JTabbedPaneCloseButton mainTab;
    private javax.swing.JPanel pnlview;
    private javax.swing.JToolBar tb;
    private javax.swing.JTextField tfTicker;
    private javax.swing.JTabbedPane westPane;
    // End of variables declaration//GEN-END:variables

    private void updateNewsTicker() {
        createExchangeLabel();
    }

    private void createExchangeLabel() {

        HashMap<String, String> hm = new HashMap(DataFetchingDaemon.emap);
        if (hm.isEmpty()) {
            return;
        }
        try {
            String market_state = hm.get("m_state");
            lbState.setText(market_state);
            lbState.setBackground(Color.yellow);
            String hi_current = hm.get("hi_current");
            String hi_change = hm.get("hi_change");
            String k3_current = hm.get("k3_current");
            String k3_change = hm.get("k3_change");
            String as_current = hm.get("as_current");
            String as_change = hm.get("as_change");
            String ki_current = hm.get("ki_current");
            String ki_change = hm.get("ki_change");
            String ai_current = hm.get("ai_current");
            String ai_change = hm.get("ai_change");

            double hichange = Double.parseDouble(hi_change);
            double k3change = Double.parseDouble(k3_change);
            double aschange = Double.parseDouble(as_change);
            double kichange = Double.parseDouble(ki_change);
            double aichange = Double.parseDouble(ai_change);

            JLabel hilabel = createIndexLabel("KSE100", hi_current, hichange);
            JLabel k3label = createIndexLabel("KSE30", k3_current, k3change);
            JLabel aslabel = createIndexLabel("AllShare", as_current, aschange);
            JLabel kilabel = createIndexLabel("KMI30", ki_current, kichange);
            JLabel ailabel = createIndexLabel("AllShare-Islamic", ai_current, aichange);

            //pnlview.add(ailabel);

            String advance = hm.get("m_advance");
            String decline = hm.get("m_declined");
            String unchanged = hm.get("m_unchanged");
            String trades = hm.get("m_trades");
            String volume = hm.get("m_volume");
            String value = hm.get("m_value");

            JLabel advLabel = createExchangeInfoLabel("Adv", advance, "up16.png");
            JLabel decLabel = createExchangeInfoLabel("Dec", decline, "down16.png");
            JLabel unLabel = createExchangeInfoLabel("Unchanged", unchanged, "unchange16.png");
            JLabel trLabel = createExchangeInfoLabel("Trades", trades, "");
            JLabel voLabel = createExchangeInfoLabel("Volume", volume, "");
            JLabel valLabel = createExchangeInfoLabel("Value", value, "");
            
            pnlview.removeAll();
            pnlview.add(hilabel);
            pnlview.add(k3label);
            pnlview.add(aslabel);
            pnlview.add(kilabel);
            pnlview.add(advLabel);
            pnlview.add(decLabel);
            pnlview.add(unLabel);
            pnlview.add(trLabel);
            pnlview.add(voLabel);
            pnlview.add(valLabel);

            String refTime = DataFetchingDaemon.getRefreshTime();
            JLabel lb = new JLabel();
            lb.setFont(labelFont);
            lb.setText("[Last Update: " + refTime + "]");
            pnlview.add(lb);

            pnlview.update(pnlview.getGraphics());
            pnlview.validate();
            
            tb.update(tb.getGraphics());
            tb.validate();

        } catch (Exception e) {

        }
    }

    private void sleep(int value) {

        try {
            Thread.sleep(value);
        } catch (InterruptedException e) {

        }
    }

    private JLabel createExchangeInfoLabel(String item, String value, String icon) {
        JLabel lb = new JLabel();

        String text = "<html>";
        text += "<font color=white>" + item + "</font> ";
        text += "&nbsp;" + value;
        lb.setText(text);
        lb.setHorizontalAlignment(SwingConstants.CENTER);
        lb.setFont(labelFont);
        return lb;
    }

    private JLabel createIndexLabel(String indexName, String indexCurrent,
            double indexChange) {

        Color downColor = new Color(60, 0, 0);
        Color upColor = new Color(0, 60, 0);
        Color unColor = new Color(0, 0, 60);

        String ch = new DecimalFormat("#.##").format(indexChange);

        CMResource cmr = new CMResource();
        ImageIcon ic = null;
        JLabel lb = new JLabel();
        if (indexChange > 0) {
            lb.setForeground(upColor);
            ch = "+" + ch;
        } else if (indexChange < 0) {
            lb.setForeground(downColor);
            // lb.setIcon(cmr.getIcon("down32a.png"));
        } else if (indexChange == 0) {
            lb.setForeground(unColor);
            // lb.setIcon(cmr.getIcon("unchanged32a.png"));
        }

        String text = "<HTML>";
        text += "<font color=white>" + indexName + "</font>&nbsp;";
        text += indexCurrent + " ";
        text += ch;

        lb.setText(text);
        lb.setFont(labelFont);

        return lb;
    }

//    private JLabel createNewsItem(String text) {
//        System.out.println("The line is " + text);
//        JLabel lb = new JLabel();
//
////        lb.setFont(customFont);
//        lb.setForeground(Color.white);
//        lb.setBackground(new Color(103, 0, 0));
//        lb.setHorizontalAlignment(SwingConstants.CENTER);
//        lb.setText(text);
//
//        return lb;
//    }
    private boolean checkFeedUpdate() {

        boolean updated = false;
        long t = new Date().getTime();
        String url = CoolmarchConstants.COOLMARCH_SERVER+"/abscripts/gupt_feed.php?tt=" + t;
        ReadUrl ru = new ReadUrl(url);
        ArrayList<String> lines = ru.getLines();
        if (lines.isEmpty()) {

        } else {
            String dt = lines.get(0);
            Date thisUpdate = null;
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            try {
                thisUpdate = sdf.parse(dt);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }

            if (thisUpdate.after(guptDate)) {
                guptDate = thisUpdate;
                updated = true;
            }
        }

        return updated;
    }

    private void updateChartValueMarkers() {
        
        HashMap<String, Double> hm = new HashMap(DataFetchingDaemon.vmMap);
        if (hm.isEmpty()) {

        } else {
            Set<String> cset = chartRegister.keySet();
            for (String sid : cset) {
                String[] toke = sid.split("-");
                String symbol = toke[0];
                if (symbol.compareToIgnoreCase("KSE100") == 0) {
                    JFreeChart chart = chartRegister.get(sid);
                    String val = DataFetchingDaemon.emap.get("hi_current");
                    if (val == null) {
                        val = "0";
                    }
                    double value = Double.parseDouble(val);
                    setValueMark(symbol, chart, value);
                } else {
                    try{
                    JFreeChart chart = chartRegister.get(sid);
                    double value = hm.get(symbol);
                    setValueMark(symbol, chart, value);
                    }catch(Exception e){
                        System.out.println("Exception in updating valuemarker");
                    }
                }
            }
        }
    }

    private static void setValueMark(String symbol, JFreeChart chart, double value) {
        String plotType = getPlotType(chart);
        if (plotType.compareToIgnoreCase("CategoryPlot") == 0) {
            chart.getCategoryPlot().clearRangeMarkers();
            ValueMarker vm = new ValueMarker(value);
            vm.setLabel(symbol + " " + value);
            vm.setLabelAnchor(RectangleAnchor.CENTER);
            vm.setPaint(Color.blue);
            vm.setLabelBackgroundColor(Color.yellow);
            chart.getCategoryPlot().addRangeMarker(vm);
        } else if (plotType.compareToIgnoreCase("XYPlot") == 0) {
            chart.getXYPlot().clearRangeMarkers();
            ValueMarker vm = new ValueMarker(value);
            vm.setLabel(symbol + " " + value);
            vm.setLabelAnchor(RectangleAnchor.CENTER);
            vm.setPaint(Color.blue);
            vm.setLabelBackgroundColor(Color.yellow);
            chart.getXYPlot().addRangeMarker(vm);
        }
    }

    private static String getPlotType(JFreeChart chart) {
        String ptype = "";
        if (chart.getPlot() instanceof CategoryPlot) {
            return "CategoryPlot";
        } else if (chart.getPlot() instanceof XYPlot) {
            return "XYPlot";
        }

        return ptype;
    }

    public static void registerChart(String regId, JFreeChart chart) {
        try{
        chartRegister.put(regId, chart);
        if (DataFetchingDaemon.vmMap.isEmpty()) {

        } else {
            String[] toke = regId.split("-");
            String symbol = toke[0];

            if (symbol.compareToIgnoreCase("KSe100") == 0) {
                String val = DataFetchingDaemon.emap.get("hi_current");
                if (val == null) {
                    val = "0";
                }
                double value = Double.parseDouble(val);
                setValueMark(symbol, chart, value);
            } else {
                double value = DataFetchingDaemon.vmMap.get(symbol);
                setValueMark(symbol, chart, value);
            }

        }
        }catch(Exception e){
            System.out.println("Warning. Symbol definition not found in vmMap");
        }
    }

    public static void unregisterChart(String regId) {
        chartRegister.remove(regId);
    }
}
