/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.coolmarch.cmnew.mchart;

import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import net.coolmarch.cmnew.common.Quote;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.OHLCDataItem;

/**
 *
 * @author sania
 */
public class PnlRiskAnalysis extends javax.swing.JPanel {

    /**
     * Creates new form PnlRiskAnalysis
     */
    private ArrayList<OHLCDataItem> quoteList;
    private ChartPanel cp;
    
    public PnlRiskAnalysis() {
        initComponents();
    }

    public PnlRiskAnalysis(ArrayList<OHLCDataItem> quoteList) {
        initComponents();
        this.quoteList = quoteList;
        calculateVar();
        createFrequencyBarChart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblRisk = new javax.swing.JTable();
        pnl = new javax.swing.JPanel();

        tblRisk.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "% Range", "Frequency"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRisk);

        pnl.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        pnl.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbPfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPfActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbPfActionPerformed

    private void createFrequencyBarChart() {
        pnl.removeAll();
        int rCount = tblRisk.getRowCount();
        DefaultCategoryDataset my_bar_chart_dataset = new DefaultCategoryDataset();
        for (int i = 0; i <= rCount - 1; i++) {
            double cat = (Double) tblRisk.getValueAt(i, 0);
            int val = (Integer) tblRisk.getValueAt(i, 1);
            my_bar_chart_dataset.addValue(val, "", Double.toString(cat));
        }

        JFreeChart bchart = ChartFactory.createBarChart("", "",
                "", my_bar_chart_dataset, PlotOrientation.HORIZONTAL,
                false, false, false);

        //bchart.setBackgroundPaint(pnl.getBackground());
        cp = new ChartPanel(bchart, false);
        cp.getChart().setBackgroundPaint(pnl.getBackground());
        //cp.setBackground(pnl.getBackground());
        cp.setPreferredSize(new Dimension(600, 300));
        
        

        CategoryPlot plot = (CategoryPlot) bchart.getPlot();
        plot.setBackgroundPaint(pnl.getBackground());
        plot.setRangeGridlinePaint(Color.blue);

        pnl.add(cp);
        pnl.update(pnl.getGraphics());
        pnl.validate();

    }
    
    public ChartPanel getChartPanel(){
        return cp;
    }

    private void calculateVar() {
        List arrList = new ArrayList();
        for (int i = 0; i <= quoteList.size() - 1; i++) {
            OHLCDataItem q = (OHLCDataItem) quoteList.get(i);
            double open = q.getOpen().doubleValue();
            double close = q.getClose().doubleValue();
            double factor = (close - open) / close;
            double percent = factor * 100;
            percent = Math.round(percent);
            //System.out.println(percent);
            arrList.add(percent);
        }

        DefaultTableModel model = (DefaultTableModel) this.tblRisk.getModel();
        model.setRowCount(0);

        int fm5 = Collections.frequency(arrList, -5.0);
        Vector v = new Vector();
        v.add(-5.0);
        v.add(fm5);
        model.addRow(v);
        int fm4 = Collections.frequency(arrList, -4.0);
        v = new Vector();
        v.add(-4.0);
        v.add(fm4);
        model.addRow(v);
        int fm3 = Collections.frequency(arrList, -3.0);
        v = new Vector();
        v.add(-3.0);
        v.add(fm3);
        model.addRow(v);
        int fm2 = Collections.frequency(arrList, -2.0);
        v = new Vector();
        v.add(-2.0);
        v.add(fm2);
        model.addRow(v);
        int fm1 = Collections.frequency(arrList, -1.0);
        v = new Vector();
        v.add(-1.0);
        v.add(fm1);
        model.addRow(v);
        int fm0 = Collections.frequency(arrList, 0.0);
        v = new Vector();
        v.add(0.0);
        v.add(fm0);
        model.addRow(v);

        int f1 = Collections.frequency(arrList, 1.0);
        v = new Vector();
        v.add(1.0);
        v.add(f1);
        model.addRow(v);
        int f2 = Collections.frequency(arrList, 2.0);
        v = new Vector();
        v.add(2.0);
        v.add(f2);
        model.addRow(v);
        int f3 = Collections.frequency(arrList, 3.0);
        v = new Vector();
        v.add(3.0);
        v.add(f3);
        model.addRow(v);
        int f4 = Collections.frequency(arrList, 4.0);
        v = new Vector();
        v.add(4.0);
        v.add(f4);
        model.addRow(v);
        int f5 = Collections.frequency(arrList, 5.0);
        v = new Vector();
        v.add(5.0);
        v.add(f5);
        model.addRow(v);

        //System.out.println(fm5);
        //System.out.println(fm4);
        //System.out.println(fm3);
        //System.out.println(fm2);
        //System.out.println(fm1);
        //System.out.println(fm0);
        //System.out.println(f1);
        //System.out.println(f2);
        //System.out.println(f3);
        //System.out.println(f4);
        //System.out.println(f5);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnl;
    private javax.swing.JTable tblRisk;
    // End of variables declaration//GEN-END:variables
}
