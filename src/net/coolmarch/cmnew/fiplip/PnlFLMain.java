/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.coolmarch.cmnew.fiplip;

import java.awt.BorderLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.ImageIcon;
import net.coolmarch.cmnew.common.CMImporter;
import net.coolmarch.cmnew.res.CMResource;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.entity.ChartEntity;
import org.jfree.chart.entity.PieSectionEntity;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.ui.Align;

/**
 *
 * @author coolmarch
 */
public class PnlFLMain extends javax.swing.JPanel {

    private ArrayList<String> lines;

    /**
     * Creates new form PnlFLMain
     */
    public PnlFLMain() {
        initComponents();
        CMImporter cmi = new CMImporter("fldata.zip");
        lines = cmi.getLines();
        for (String line : lines) {
         //   System.out.println(line);
        }

        String dt = this.getFipLipFileDate();
        tfDetails.setText("   Foreign and Local Investors Portfolio Details:      Date:"+dt);
        //tfChartTitle.setText("Money Inflow: Client Wise");
        tfChartDescription.setText("Money Inflow: Client Wise - Details");
        setInflowClient();

        //tfChartTitle.setText("Money Outflow: Client Wise");
        tfChartDescription.setText("Money Outflow: Client Wise - Details");
        setOutflowClient();

        // tfChartTitle.setText("Inflow-Outflow Distribution: Client Wise");
        tfChartDescription.setText("Percentage of Inflow-Outflow Distribution");
        setDistributionByClient();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jSplitPane5 = new javax.swing.JSplitPane();
        pnlClientwiseInflow = new javax.swing.JPanel();
        pnlPie = new javax.swing.JPanel();
        pieIn = new javax.swing.JPanel();
        pnlClientwiseInflowDetails = new javax.swing.JPanel();
        pnlFlowDetails = new javax.swing.JPanel();
        tfChartDescription = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jSplitPane4 = new javax.swing.JSplitPane();
        jPanel5 = new javax.swing.JPanel();
        jSplitPane6 = new javax.swing.JSplitPane();
        pnlClientwiseOutflow = new javax.swing.JPanel();
        pnlPieOutflow = new javax.swing.JPanel();
        pieOut = new javax.swing.JPanel();
        pnlClientwiseOutflowDetails = new javax.swing.JPanel();
        pnlFlowDetailsOutflow = new javax.swing.JPanel();
        tfChartDescription1 = new javax.swing.JTextField();
        pnlInOutDetails = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        pnlClientDetails = new javax.swing.JPanel();
        pnlDataView = new javax.swing.JPanel();
        tfDetails = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setBorder(null);
        jSplitPane1.setDividerLocation(650);
        jSplitPane1.setOneTouchExpandable(true);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jSplitPane2.setDividerLocation(150);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setOneTouchExpandable(true);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jSplitPane5.setDividerLocation(300);

        pnlClientwiseInflow.setBorder(javax.swing.BorderFactory.createTitledBorder("Clientwise Inflow"));
        pnlClientwiseInflow.setLayout(new java.awt.BorderLayout());

        pnlPie.setLayout(new java.awt.BorderLayout());

        pieIn.setLayout(new java.awt.BorderLayout());
        pnlPie.add(pieIn, java.awt.BorderLayout.CENTER);

        pnlClientwiseInflow.add(pnlPie, java.awt.BorderLayout.CENTER);

        jSplitPane5.setLeftComponent(pnlClientwiseInflow);

        pnlClientwiseInflowDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));
        pnlClientwiseInflowDetails.setLayout(new java.awt.BorderLayout());

        pnlFlowDetails.setLayout(new java.awt.BorderLayout());

        tfChartDescription.setEditable(false);
        tfChartDescription.setBackground(new java.awt.Color(204, 204, 255));
        tfChartDescription.setForeground(new java.awt.Color(51, 0, 102));
        tfChartDescription.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfChartDescription.setBorder(null);
        pnlFlowDetails.add(tfChartDescription, java.awt.BorderLayout.PAGE_START);

        pnlClientwiseInflowDetails.add(pnlFlowDetails, java.awt.BorderLayout.CENTER);

        jSplitPane5.setRightComponent(pnlClientwiseInflowDetails);

        jPanel3.add(jSplitPane5, java.awt.BorderLayout.CENTER);

        jSplitPane2.setTopComponent(jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jSplitPane4.setDividerLocation(150);
        jSplitPane4.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane4.setOneTouchExpandable(true);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jSplitPane6.setDividerLocation(300);

        pnlClientwiseOutflow.setBorder(javax.swing.BorderFactory.createTitledBorder("Clientwise Outflow"));
        pnlClientwiseOutflow.setPreferredSize(new java.awt.Dimension(283, 193));
        pnlClientwiseOutflow.setLayout(new java.awt.BorderLayout());

        pnlPieOutflow.setLayout(new java.awt.BorderLayout());

        pieOut.setLayout(new java.awt.BorderLayout());
        pnlPieOutflow.add(pieOut, java.awt.BorderLayout.CENTER);

        pnlClientwiseOutflow.add(pnlPieOutflow, java.awt.BorderLayout.CENTER);

        jSplitPane6.setLeftComponent(pnlClientwiseOutflow);

        pnlClientwiseOutflowDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));
        pnlClientwiseOutflowDetails.setLayout(new java.awt.BorderLayout());

        pnlFlowDetailsOutflow.setLayout(new java.awt.BorderLayout());

        tfChartDescription1.setEditable(false);
        tfChartDescription1.setBackground(new java.awt.Color(204, 204, 255));
        tfChartDescription1.setForeground(new java.awt.Color(51, 0, 102));
        tfChartDescription1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfChartDescription1.setBorder(null);
        pnlFlowDetailsOutflow.add(tfChartDescription1, java.awt.BorderLayout.PAGE_START);

        pnlClientwiseOutflowDetails.add(pnlFlowDetailsOutflow, java.awt.BorderLayout.CENTER);

        jSplitPane6.setRightComponent(pnlClientwiseOutflowDetails);

        jPanel5.add(jSplitPane6, java.awt.BorderLayout.CENTER);

        jSplitPane4.setTopComponent(jPanel5);

        pnlInOutDetails.setLayout(new java.awt.BorderLayout());
        jSplitPane4.setRightComponent(pnlInOutDetails);

        jPanel4.add(jSplitPane4, java.awt.BorderLayout.CENTER);

        jSplitPane2.setRightComponent(jPanel4);

        jPanel1.add(jSplitPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jSplitPane3.setDividerLocation(350);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlClientDetails.setLayout(new java.awt.BorderLayout());
        jSplitPane3.setLeftComponent(pnlClientDetails);

        pnlDataView.setLayout(new java.awt.BorderLayout());
        jSplitPane3.setRightComponent(pnlDataView);

        jPanel2.add(jSplitPane3, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

        tfDetails.setEditable(false);
        tfDetails.setBackground(new java.awt.Color(204, 204, 255));
        tfDetails.setBorder(null);
        tfDetails.setDisabledTextColor(new java.awt.Color(0, 0, 51));
        tfDetails.setEnabled(false);
        add(tfDetails, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void setDistributionByClient() {
        TreeMap<String, T_DD> map = getClientPercentageAll();
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (String str : map.keySet()) {
            T_DD ditem = map.get(str);
            double val1 = ditem.getValue1();
            double val2 = ditem.getValue2();
            String val1Label = ditem.getValue1Label();
            String val2Label = ditem.getValue2Label();
            if (str.startsWith("BANKS")) {
                str = "Banks";
            } else if (str.startsWith("OVERSEAS PAKISTAN")) {
                str = "Overseas";
            } else if (str.startsWith("BROKER")) {
                str = "Brokers";
            } else if (str.startsWith("FOREIGN CORPORATES")) {
                str = "Foreign(Cor)";
            } else if (str.startsWith("FOREIGN INDIVIDUAL")) {
                str = "Foreign(Indiv)";
            }

            dataset.addValue(Math.abs(val1), val1Label, str);
            dataset.addValue(Math.abs(val2), val2Label, str);
        }

        CBarChart bc = new CBarChart();

        JFreeChart chart = bc.createComplexBarChart(dataset);
        chart.setBackgroundPaint(this.getBackground());
        CategoryPlot catPlot = chart.getCategoryPlot();
        BarRenderer renderer = (BarRenderer) catPlot.getRenderer();
        catPlot.setBackgroundPaint(this.getBackground());
        renderer.setSeriesPaint(0, new Color(34, 139, 34));
        renderer.setSeriesPaint(1, new Color(255, 99, 71));
        renderer.setDrawBarOutline(true);
        CMResource cmr = new CMResource();
        ImageIcon img = cmr.getIcon("chartbgimg.png");
        chart.getPlot().setBackgroundImage(img.getImage());
        chart.getPlot().setBackgroundImageAlignment(Align.CENTER);
        chart.getPlot().setBackgroundAlpha(0.3f);
        chart.getCategoryPlot().setDomainGridlinesVisible(true);
        chart.getCategoryPlot().setRangeGridlinesVisible(true);

        ChartPanel cp = new ChartPanel(chart);
        pnlClientDetails.removeAll();
//        pnlClientDetails.add(tfChartTitle, BorderLayout.NORTH);
        pnlClientDetails.add(cp);
        pnlClientDetails.update(pnlClientDetails.getGraphics());
        pnlClientDetails.validate();

        GListPanel pane = new GListPanel(map, 30, 0, 250);
        pnlDataView.removeAll();
        pnlDataView.add(tfChartDescription, BorderLayout.NORTH);
        pnlDataView.add(pane);
        pnlDataView.update(pnlDataView.getGraphics());
        pnlDataView.validate();

    }

    private void createSliceDetailsChart(TreeMap<String, Double> map) {
        final DefaultCategoryDataset dataset
                = new DefaultCategoryDataset();
        Set<String> ks = map.keySet();
        for (String key : ks) {
            double val = map.get(key);
            dataset.addValue(val, "", key);
        }
        
        CBarChart cbc = new CBarChart();
        JFreeChart chart = cbc.createSliceDetailsBarchart(dataset);
        this.pnlInOutDetails.removeAll();
        pnlInOutDetails.add(new ChartPanel(chart));
        pnlInOutDetails.update(pnlInOutDetails.getGraphics());
        pnlInOutDetails.validate();
    }

    private void setInflowClient() {
        TreeMap<String, Double> map = new TreeMap<>();

        for (String line : lines) {
            if (line.startsWith("#INFLOW-SUMMARY>")) {
                line = line.replaceAll("#INFLOW-SUMMARY>", "");
                String[] toke = line.split(",");
                String client = toke[0];
                String val = toke[1];
                double value = Double.parseDouble(val);
                map.put(client, new Double(value));
            }
        }

        FLNormalCharts fc = new FLNormalCharts();
        JFreeChart chart = fc.getInvestmentInChart(map);
        chart.setBackgroundPaint(pnlPie.getBackground());
        CMResource cmr = new CMResource();
        ImageIcon img = cmr.getIcon("chartbgimg.png");
        chart.getPlot().setBackgroundImage(img.getImage());
        chart.getPlot().setBackgroundImageAlignment(Align.BOTTOM_LEFT);
        chart.getPlot().setBackgroundAlpha(0.3f);

        ChartPanel cp = new ChartPanel(chart);
        cp.setBorder(null);
        cp.getChart().getPlot().setBackgroundPaint(new Color(238, 238, 238));

        cp.setMouseZoomable(false);

        cp.addChartMouseListener(new ChartMouseListener() {

            @Override
            public void chartMouseClicked(ChartMouseEvent cme) {
                int clickCount = cme.getTrigger().getClickCount();
                if (clickCount == 2) {
                    ChartEntity entity = cme.getEntity();
                    if (!(entity instanceof PieSectionEntity)) {
                        return;
                    }
                    PieSectionEntity cie = (PieSectionEntity) entity;
                   // System.out.println(cie.getSectionKey());
                    //String client = cie.toString();
                    String client = cie.getSectionKey().toString();
//                    CommonFLOps cmo = new CommonFLOps();
                    TreeMap<String, Double> map = getClientProgressBySectorIn(client);
                    createSliceDetailsChart(map);
//                    PnlSectorByClient gsc = new PnlSectorByClient(map, "Money Inflow Through: " + client);
//                    pnlInOutDetails.removeAll();
//                    pnlInOutDetails.add(gsc);
//                    pnlInOutDetails.update(pnlInOutDetails.getGraphics());
//                    pnlInOutDetails.validate();
//                    InternalFrame iframe = new InternalFrame(gsc);
                }

            }

            @Override
            public void chartMouseMoved(ChartMouseEvent cme) {
                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

        pieIn.removeAll();
        //pnlPie.add(tfChartTitle);
        pieIn.add(cp);
        pieIn.update(pieIn.getGraphics());
        pieIn.validate();

        GMapPanel gmp = new GMapPanel(map, 20, GMapPanel.L_ALIGN, 200);
        //gmp.setBackground(Color.white);

        pnlFlowDetails.removeAll();
        pnlFlowDetails.add(tfChartDescription, BorderLayout.NORTH);
        pnlFlowDetails.add(gmp);
        pnlFlowDetails.update(pnlFlowDetails.getGraphics());
        pnlFlowDetails.validate();

    }

    private void setOutflowClient() {
        TreeMap<String, Double> map = new TreeMap<>();

        for (String line : lines) {
            if (line.startsWith("#OUTFLOW-SUMMARY>")) {
                line = line.replaceAll("#OUTFLOW-SUMMARY>", "");
                String[] toke = line.split(",");
                String client = toke[0];
                String val = toke[1];
                double value = Double.parseDouble(val);
                map.put(client, new Double(value));
            }
        }

        FLNormalCharts fc = new FLNormalCharts();
        JFreeChart chart = fc.getInvestmentInChart(map);
        chart.setBackgroundPaint(pnlPie.getBackground());
        CMResource cmr = new CMResource();
        ImageIcon img = cmr.getIcon("chartbgimg.png");
        chart.getPlot().setBackgroundImage(img.getImage());
        chart.getPlot().setBackgroundImageAlignment(Align.BOTTOM_LEFT);
        chart.getPlot().setBackgroundAlpha(0.3f);

        ChartPanel cp = new ChartPanel(chart);
        cp.setBorder(null);
        cp.getChart().getPlot().setBackgroundPaint(new Color(238, 238, 238));
        cp.setMouseZoomable(false);

        cp.addChartMouseListener(new ChartMouseListener() {

            @Override
            public void chartMouseClicked(ChartMouseEvent cme) {
                int clickCount = cme.getTrigger().getClickCount();
                if (clickCount == 2) {
                    ChartEntity entity = cme.getEntity();
                    if (!(entity instanceof PieSectionEntity)) {
                        return;
                    }
                    PieSectionEntity cie = (PieSectionEntity) entity;
                   // System.out.println(cie.getSectionKey());
                    //String client = cie.toString();
                    String client = cie.getSectionKey().toString();
//                    CommonFLOps cmo = new CommonFLOps();
                    TreeMap<String, Double> map = getClientProgressBySectorOut(client);
                    createSliceDetailsChart(map);

//                    PnlSectorByClient gsc = new PnlSectorByClient(map, "Money Outflow Through: " + client);
//                    pnlInOutDetails.removeAll();
//                    pnlInOutDetails.add(gsc);
//                    pnlInOutDetails.update(pnlInOutDetails.getGraphics());
//                    pnlInOutDetails.validate();
//                    InternalFrame iframe = new InternalFrame(gsc);
                }

            }

            @Override
            public void chartMouseMoved(ChartMouseEvent cme) {
            }
        });

        pieOut.removeAll();
        //pnlPieOutflow.add(tfChartTitle, BorderLayout.NORTH);
        pieOut.add(cp);
        pieOut.update(pieOut.getGraphics());
        pieOut.validate();

        GMapPanel gmp = new GMapPanel(map, 20, GMapPanel.L_ALIGN, 200);
        //gmp.setBackground(Color.white);
        pnlFlowDetailsOutflow.removeAll();
        pnlFlowDetailsOutflow.add(tfChartDescription, BorderLayout.NORTH);
        pnlFlowDetailsOutflow.add(gmp);
        pnlFlowDetailsOutflow.update(pnlFlowDetailsOutflow.getGraphics());
        pnlFlowDetailsOutflow.validate();

    }

    private TreeMap<String, Double> getClientProgressBySectorIn(String client) {
        TreeMap<String, Double> map = new TreeMap<>();
        for (String line : lines) {
            if (line.startsWith("#INFLOW-DETAIL>")) {
                line = line.replaceAll("#INFLOW-DETAIL>", "");
                line = line.trim();
                String[] toke = line.split(",");
                String c = toke[0];
                String sec = toke[1];
                String val = toke[2];

                if (c.compareToIgnoreCase(client) == 0) {
                   // System.out.println(val);
                    double value = Double.parseDouble(val);
                    map.put(sec, new Double(value));
                }
            }
        }

        return map;

    }

    private TreeMap<String, Double> getClientProgressBySectorOut(String client) {
        TreeMap<String, Double> map = new TreeMap<>();
        for (String line : lines) {
            if (line.startsWith("#OUTFLOW-DETAIL>")) {
                line = line.replaceAll("#OUTFLOW-DETAIL>", "");
                line = line.trim();
                String[] toke = line.split(",");
                String c = toke[0];
                String sec = toke[1];
                String val = toke[2];

                if (c.compareToIgnoreCase(client) == 0) {
                 //   System.out.println(val);
                    double value = Double.parseDouble(val);
                    map.put(sec, new Double(value));
                }
            }
        }

        return map;

    }
    
   private String getFipLipFileDate(){
       String date = "";
       for(String line:lines){
           String suffix = "#FIPLIP-DATE>";
           if(line.startsWith(suffix)){
               date = line.replaceAll(suffix, "");
               return date;
           }
       }
       
       return date;
   }

    private TreeMap<String, T_DD> getClientPercentageAll() {
        TreeMap<String, T_DD> map = new TreeMap<>();
        for (String line : lines) {
            if (line.startsWith("#DISTRO-CLIENT>")) {
                line = line.replaceAll("#DISTRO-CLIENT>", "");
                String[] toke = line.split(",");
                String ctype = toke[0];
                String v1 = toke[1];
                String v2 = toke[2];
                double val1 = Double.parseDouble(v1);
                double val2 = Double.parseDouble(v2);
                T_DD vals = new T_DD();
                vals.setValue1(val1);
                vals.setValue2(val2);
                vals.setValue1Label("Inflow");
                vals.setValue2Label("Outflow");
                map.put(ctype, vals);

            }
        }

        return map;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JSplitPane jSplitPane6;
    private javax.swing.JPanel pieIn;
    private javax.swing.JPanel pieOut;
    private javax.swing.JPanel pnlClientDetails;
    private javax.swing.JPanel pnlClientwiseInflow;
    private javax.swing.JPanel pnlClientwiseInflowDetails;
    private javax.swing.JPanel pnlClientwiseOutflow;
    private javax.swing.JPanel pnlClientwiseOutflowDetails;
    private javax.swing.JPanel pnlDataView;
    private javax.swing.JPanel pnlFlowDetails;
    private javax.swing.JPanel pnlFlowDetailsOutflow;
    private javax.swing.JPanel pnlInOutDetails;
    private javax.swing.JPanel pnlPie;
    private javax.swing.JPanel pnlPieOutflow;
    private javax.swing.JTextField tfChartDescription;
    private javax.swing.JTextField tfChartDescription1;
    private javax.swing.JTextField tfDetails;
    // End of variables declaration//GEN-END:variables
}
